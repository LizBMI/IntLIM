str(clindata)
first_gene = data.frame(t(gene_directread[2,]), stringsAsFactors = FALSE)
ZRSR2 = data.frame(first_gene[-c(1),], stringsAsFactors = FALSE)
cells = gene_directread[1,][-c(1)]
rownames(ZRSR2) = as.character(unlist(cells))
colnames(ZRSR2) = "ZRSR2"
pheno[,1] %in% rownames(ZRSR2)
clindata_directread = cbind(ZRSR2, as.character(unlist(pheno[,3])))
colnames(clindata_directread) = c("g", "type")
rownames(clindata_directread) = NULL
clindata_directread
str(clindata_directread)
pheno[,1]
str(pheno)
pheno[,3]
data.frame(pheno[,3], stringsAsFactors = FALSE)
phenotypes = data.frame(pheno[,3], stringsAsFactors = FALSE)
ZRSR2
str(ZRSR2)
clindata_directread = cbind(ZRSR2, phenotypes)
str(clindata_directread)
colnames(clindata_directread) = c("g", "type")
rownames(clindata_directread) = NULL
clindata_directread = data.frame(cbind(ZRSR2, phenotypes), stringsAsFactors = FALSE)
str(clindata_directread)
clindata_directread
ZRSR2$pheno = phenotypes
str(ZRSR@)
str(ZRSR2)
str(clindata)
ZRSR2$pheno = phenotypes
clindata_directrea <- data.frame(lapply(ZRSR2, as.character), stringsAsFactors=FALSE)
clindata_directrea
str(ZRSR2)
str(ZRSR2)
str(clindata)
ZRSR2
first_gene = data.frame(t(gene_directread[2,]), stringsAsFactors = FALSE)
ZRSR2 = data.frame(first_gene[-c(1),], stringsAsFactors = FALSE)
cells = gene_directread[1,][-c(1)]
str(ZRSR2)
first_gene = data.frame(t(gene_directread[2,]), stringsAsFactors = FALSE)
ZRSR2 = data.frame(first_gene[-c(1),], stringsAsFactors = FALSE)
cells = gene_directread[1,][-c(1)]
rownames(ZRSR2) = as.character(unlist(cells))
colnames(ZRSR2) = "ZRSR2"
phenotypes = data.frame(pheno[,3], stringsAsFactors = FALSE)
ZRSR2$pheno = phenotypes
ZRSR2
i <- sapply(ZRSR2, is.factor)
ZRSR2[i] <- lapply(ZRSR2[i], as.character)
str(ZRSR2)
i <- sapply(ZRSR2, is.character)
ZRSR2[i] <- lapply(ZRSR2[i], as.numeric)
str(ZRSR2)
i <- sapply(ZRSR2, is.factor)
ZRSR2[i] <- lapply(ZRSR2[i], as.character)
str(ZRSR2)
first_gene = data.frame(t(gene_directread[2,]), stringsAsFactors = FALSE)
ZRSR2 = data.frame(first_gene[-c(1),], stringsAsFactors = FALSE)
cells = gene_directread[1,][-c(1)]
rownames(ZRSR2) = as.character(unlist(cells))
colnames(ZRSR2) = "ZRSR2"
phenotypes = data.frame(pheno[,3], stringsAsFactors = FALSE)
ZRSR2$pheno = phenotypes
colnames(clindata_directread) = c("g", "type")
rownames(clindata_directread) = NULL
i <- sapply(ZRSR2, is.character)
ZRSR2[i] <- lapply(ZRSR2[i], as.numeric)
i <- sapply(ZRSR2, is.factor)
ZRSR2[i] <- lapply(ZRSR2[i], as.character)
str(ZRSR2)
str(clindata)
first_gene = data.frame(t(gene_directread[2,]), stringsAsFactors = FALSE)
ZRSR2 = data.frame(first_gene[-c(1),], stringsAsFactors = FALSE)
cells = gene_directread[1,][-c(1)]
rownames(ZRSR2) = as.character(unlist(cells))
colnames(ZRSR2) = "ZRSR2"
phenotypes = data.frame(pheno[,3], stringsAsFactors = FALSE)
ZRSR2$pheno = unlist(phenotypes)
colnames(clindata_directread) = c("g", "type")
rownames(clindata_directread) = NULL
i <- sapply(ZRSR2, is.character)
ZRSR2[i] <- lapply(ZRSR2[i], as.numeric)
i <- sapply(ZRSR2, is.factor)
ZRSR2[i] <- lapply(ZRSR2[i], as.character)
str(clindata)
str(clindata)
str(ZRSR2)
first_gene = data.frame(t(gene_directread[2,]), stringsAsFactors = FALSE)
ZRSR2 = data.frame(first_gene[-c(1),], stringsAsFactors = FALSE)
cells = gene_directread[1,][-c(1)]
rownames(ZRSR2) = as.character(unlist(cells))
colnames(ZRSR2) = "ZRSR2"
phenotypes = data.frame(pheno[,3], stringsAsFactors = FALSE)
ZRSR2$pheno = unlist(phenotypes)
colnames(clindata_directread) = c("g", "type")
pheno[,3] %in% rownames(ZRSR2)
rownames(clindata_directread) = NULL
i <- sapply(ZRSR2, is.character)
ZRSR2[i] <- lapply(ZRSR2[i], as.numeric)
i <- sapply(ZRSR2, is.factor)
ZRSR2[i] <- lapply(ZRSR2[i], as.character)
clindata_directread = ZRSR2
metabo_directread_fixed = metabo_directread[,-1]
rownames(metabo_directread_fixed) = metabo_directread[,1]
form = as.formula(Y ~ g + type + g:type)
result  = getstatsOneLM(form, clindata = clindata_directread, arraydata = metabo_directread_fixed)
colnames(clindata_directread) = c("g", "type")
result  = getstatsOneLM(form, clindata = clindata_directread, arraydata = metabo_directread_fixed)
result  = getstatsOneLM(form, clindata = clindata, arraydata = metab)
result2  = getstatsOneLM(form, clindata = clindata_directread, arraydata = metabo_directread_fixed)
result = result2
result  = getstatsOneLM(form, clindata = clindata, arraydata = metab)
result2  = getstatsOneLM(form, clindata = clindata_directread, arraydata = metabo_directread_fixed)
result == result2
result
result2
result[1]
result[,1]
result[1,]
result[1]
result[1][.1]
result[1][,1]
str(result)
str(result[1])
str(result[[1][])
str(result[[1])
str(result[[1]])
result[[1]] == result[[2]]
result[[1]] == result2[[1]]
unique(result[[1]] == result2[[1]])
arraydata = metabo[,-1]
cuse <-read.table("http://data.princeton.edu/wws509/datasets/cuse.dat",
Next,	copy	and	paste:
+ header=TRUE)
cuse <-read.table("http://data.princeton.edu/wws509/datasets/cuse.dat",header=TRUE)
Print(cuse)
print(cuse)
clindata_directread
metabo_directread_fixed
clindata_directread[1,]
metabo_directread_fixed[1,]
clindata_directread
pheno[,3] %in% rownames(ZRSR2)
pheno[,3]
rownames(ZRSR2)
pheno[,1] %in% rownames(ZRSR2)
metabo_directread_fixed[1,]
t(metabo_directread_fixed[1,])
metabo_directread[,1]
metabo_directread_fixed
metabo_directread = read.csv(metaboPath, header=FALSE)
metabo_directread
metabo_directread_fixed = metabo_directread[,-1]
metabo_directread_fixed
rownames(metabo_directread_fixed) = metabo_directread[,1]
metabo_directread_fixed
metabo_directread_fixed = data.frame(metabo_directread_fixed[-c(1),], stringsAsFactors = FALSE)
metabo_directread_fixed
metabo_directread[1,]
rownames(metabo_directread_fixed) = metabo_directread[1,]
metabo_directread_fixed
colnames(metabo_directread_fixed) = metabo_directread[1,]
metabo_directread[1,]
metabo_directread[1,-1]
colnames(metabo_directread_fixed) = metabo_directread[1,-1]
metabo_directread_fixed
metabo_directread[1,-1]
colnames(metabo_directread_fixed) = as.character(unlist(metabo_directread[1,-1]))
metabo_directread_fixed
str(metabo_directread_fixed)
str(metab)
i <- sapply(metabo_directread_fixed, is.factor)
metabo_directread_fixed[i] <- lapply(metabo_directread_fixed[i], as.numeric)
metabo_directread_fixed
str(metabo_directread_fixed)
metab
str(metab)
form = as.formula(Y ~ g + type + g:type)
result2  = getstatsOneLM(form, clindata = clindata_directread, arraydata = metabo_directread_fixed)
result[[1]] == result[[2]]
result[[1]] == result2[[1]]
result2
result1
result1
result1
result2
result1
result
metabo_directread_fixed
metabo_directread_fixed = metabo_directread[,-1]
rownames(metabo_directread_fixed) = metabo_directread[,1]
metabo_directread_fixed = data.frame(metabo_directread_fixed[-c(1),], stringsAsFactors = FALSE)
colnames(metabo_directread_fixed) = as.character(unlist(metabo_directread[1,-1]))
i <- sapply(metabo_directread_fixed, is.factor)
metabo_directread_fixed[i] <- lapply(metabo_directread_fixed[i], function(x) as.numeric(as.character(x)))
str(metab)
form = as.formula(Y ~ g + type + g:type)
result2  = getstatsOneLM(form, clindata = clindata_directread, arraydata = metabo_directread_fixed)
result[[1]] == result1[[2]]
result[[1]] == result1[[1]]
result[[1]] == result2[[1]]
metabo_directread_fixed[1,]
t(metabo_directread_fixed[1,])
pheno[,1] == rownames(ZRSR2)
clindata_directread
colnames(clindata_directread) == rownames(metabo_directread_fixed)
metabo_directread_fixed
clindata_directread
rownames(clindata_directread) == colnames(metabo_directread_fixed)
t(metabo_directread_fixed[1,])
clindata_directread
rownames(clindata_directread) == colnames(metabo_directread_fixed)
clindata_directread$Y = t(metabo_directread_fixed[1,])
clindata_directread
colnames(clindata_directread) = c("g", "type", "Y")
clindata_directread
colnames(clindata_directread) = c("g", "type", "Y")
clindata_directread
colnames(clindata_directread) = c("g", "type", "Y")
clindata_directread
str(clindata_directread)
clindata_directread$Y
clindata_directread$Y = as.numeric(t(metabo_directread_fixed[1,]))
clindata_directread
lm(Y~g + type + g:type)
attach(clindata_directread)
lm(Y~g + type + g:type)
result2
result2[[1]]
result2[[1]][,1]
lm(Y~g + type + g:type)
result2[[1]][,1]
colnames(result2[[1]])[1]
metabo_directread_fixed
lm(clindata_directread, Y~g + type + g:type)
first_gene
first_gene[1,1]
first_gene[1,1]
result2[[1]][,1]
colnames(result2[[1]])[1]
result[[1]][,1]
colnames(result[[1]])[1]
clindata_directread
lm(formula = Y~g + type + g:type, data = clindata_directread)
result[[1]][,1]
lm(formula = Y~g + type + g:type, data = clindata_directread, family = "binomial")
lm(formula = Y~g + type + g:type, data = clindata_directread, family = "poisson")
glm(formula = Y~g + type + g:type, data = clindata_directread)
glm(formula = Y~g + type + g:type, data = clindata_directread, family = binomial)
glm(formula = Y~g + type + g:type, data = clindata_directread, family = "binomial")
glm(formula = Y~g + type + g:type, data = clindata_directread, family = "gaussian")
glm(formula = Y~g + type + g:type, data = clindata_directread, family = "poisson")
glm(formula = Y~g + type + g:type, data = clindata_directread, family = "Gamma")
glm(formula = Y~g + type + g:type, data = clindata_directread, family = "inverse.gaussian")
glm(formula = Y~g + type + g:type, data = clindata_directread)
result2[[1]][,1]
result2[[1]]
glm(formula = Y~g + type + g:type, data = clindata_directread)
glm(formula = Y~g + type + g:type, data = clindata_directread) == 6.598
result2[[1]]
result2[[1]][1,]
result2[[1]]
glm(formula = Y~g + type + g:type, data = clindata_directread)
dir <- system.file("extdata", package="IntLIM", mustWork=TRUE)
csvfile <- file.path(dir, "NCItestinput.csv")
csvfile
inputData <- IntLIM::ReadData(inputFile = csvfile,metabid='id',geneid='id')
inputDatafilt <- IntLIM::FilterData(inputData,geneperc = 0.10, metabmiss = 0.80)
myres <- IntLIM::RunIntLim(inputData = inputDatafilt,stype="PBO_vs_Leukemia")
myres[[1]]
myres
colnames(result2[[1]])[1]
result2[[1]][,1]
glm(formula = Y~g + type + g:type, data = clindata_directread)
str(clindata_directread)
clindata_directread
clindata_directread
metabo_directread_fixed
lm(formula = Y~g + type + g:type, data = clindata_directread)
clindata_directread
form
lm(formula = form, data = clindata_directread)
result2
result[[1]][,1]
result[[1]][1,]
c(result[[1]][1,])
as.vector(result[[1]][1,])
lm(formula = form, data = clindata_directread)
clindata_directread
t(metabo_directread_fixed[1,])
lm(formula = form, data = clindata_directread)
result2[[1]]
rownames(clindata_directread) == colnames(metabo_directread_fixed)
clindata_directread$Y = as.numeric(t(metabo_directread_fixed[1,]))
lm(formula = form, data = clindata_directread)
rownames(clindata_directread) == colnames(metabo_directread_fixed)
forglm = clindata_directread
forglm$Y = as.numeric(t(metabo_directread_fixed[1,]))
lm(formula = form, data = forglm)
dir = "/Library/Frameworks/R.framework/Versions/3.5/Resources/library/IntLIM/extdata"
geneNamesPath = file.path(dir,"fData.gene.csv")
metaboNamesPath = file.path(dir,"fData.metab.csv")
genePath = file.path(dir,"geneData.csv")
metaboPath = file.path(dir,"metabData.csv")
phenoPath = file.path(dir,"pData.csv")
geneNames = read.csv(geneNamesPath)
metaboNames = read.csv(metaboNamesPath)
gene_directread = read.csv(genePath, header=FALSE)
metabo_directread = read.csv(metaboPath, header=FALSE)
pheno = read.csv(phenoPath)
first_gene = data.frame(t(gene_directread[2,]), stringsAsFactors = FALSE)
ZRSR2 = data.frame(first_gene[-c(1),], stringsAsFactors = FALSE)
cells = gene_directread[1,][-c(1)]
rownames(ZRSR2) = as.character(unlist(cells))
colnames(ZRSR2) = "ZRSR2"
phenotypes = data.frame(pheno[,3], stringsAsFactors = FALSE)
ZRSR2$pheno = unlist(phenotypes)
colnames(clindata_directread) = c("g", "type")
pheno[,1] == rownames(ZRSR2)
rownames(clindata_directread) = NULL
i <- sapply(ZRSR2, is.character)
ZRSR2[i] <- lapply(ZRSR2[i], as.numeric)
i <- sapply(ZRSR2, is.factor)
ZRSR2[i] <- lapply(ZRSR2[i], as.character)
clindata_directread = ZRSR2
colnames(clindata_directread) = c("g", "type")
metabo_directread_fixed = metabo_directread[,-1]
rownames(metabo_directread_fixed) = metabo_directread[,1]
metabo_directread_fixed = data.frame(metabo_directread_fixed[-c(1),], stringsAsFactors = FALSE)
colnames(metabo_directread_fixed) = as.character(unlist(metabo_directread[1,-1]))
i <- sapply(metabo_directread_fixed, is.factor)
metabo_directread_fixed[i] <- lapply(metabo_directread_fixed[i], function(x) as.numeric(as.character(x)))
form = as.formula(Y ~ g + type + g:type)
result2  = getstatsOneLM(form, clindata = clindata_directread, arraydata = metabo_directread_fixed)
first_gene[1,1]
result2[[1]][,1]
colnames(result2[[1]])[1]
result[[1]][,1]
colnames(result[[1]])[1]
rownames(clindata_directread) == colnames(metabo_directread_fixed)
forglm = clindata_directread
forglm$Y = as.numeric(t(metabo_directread_fixed[1,]))
lm(formula = form, data = forglm)
myres
lm(formula = form, data = forglm)
result2[[1]][,1]
str(forglm)
form
rownames(clindata_directread) == colnames(metabo_directread_fixed)
forglm <- data.frame()
forglm$g = clindata_directread$g
forglm$type = clindata_directread$type
forglm$Y = as.numeric(t(metabo_directread_fixed[1,]))
forglm <- data.frame(, nrow=nrow(clindata_directread))
forglm$g = clindata_directread$g
nrow(clindata_directread)
forglm <- data.frame(, nrow=nrow(clindata_directread))
forglm <- data.frame(, nrow=nrow(clindata_directread, ncol=0))
forglm$g = clindata_directread$g
forglm <- data.frame(row.names = 1:200)
forglm <- data.frame(row.names = 1:nrow(clindata_directread))
forglm$g = clindata_directread$g
forglm$type = clindata_directread$type
forglm$Y = as.numeric(t(metabo_directread_fixed[1,]))
str(forglm)
forglm <- data.frame(row.names = 1:nrow(clindata_directread))
forglm$g = clindata_directread$g
forglm$type = clindata_directread$type
forglm$Y = as.factor(t(metabo_directread_fixed[1,]))
str(forglm)
rownames(clindata_directread) == colnames(metabo_directread_fixed)
forglm <- data.frame(row.names = 1:nrow(clindata_directread))
forglm$g = clindata_directread$g
forglm$type = as.factor(clindata_directread$type)
forglm$Y = as.numeric(t(metabo_directread_fixed[1,]))
lm(formula = form, data = forglm)
str(forglm)
lm(formula = form, data = forglm)
result2[[1]][,1]
forglm
reverse(clindata_directread$g)
rownames(clindata_directread) == colnames(metabo_directread_fixed)
forglm <- data.frame(row.names = 1:nrow(clindata_directread))
forglm$g = rev(clindata_directread$g)
forglm$type = as.factor(clindata_directread$type)
forglm$Y = as.numeric(t(metabo_directread_fixed[1,]))
lm(formula = form, data = forglm)
result[[1]][,1]
rownames(clindata_directread) == colnames(metabo_directread_fixed)
forglm <- data.frame(row.names = 1:nrow(clindata_directread))
forglm$g = rev(clindata_directread$g)
forglm$type = rev(as.factor(clindata_directread$type))
forglm$Y = as.numeric(t(metabo_directread_fixed[1,]))
lm(formula = form, data = forglm)
rownames(clindata_directread) == colnames(metabo_directread_fixed)
forglm <- data.frame(row.names = 1:nrow(clindata_directread))
forglm$g = clindata_directread$g
forglm$type = rev(as.factor(clindata_directread$type))
forglm$Y = as.numeric(t(metabo_directread_fixed[1,]))
lm(formula = form, data = forglm)
rownames(clindata_directread) == colnames(metabo_directread_fixed)
forglm <- rev(data.frame(row.names = 1:nrow(clindata_directread)))
forglm$g = clindata_directread$g
forglm$type = rev(as.factor(clindata_directread$type))
forglm$Y = as.numeric(t(metabo_directread_fixed[1,]))
lm(formula = form, data = forglm)
result[[1]][,1]
colnames(result[[1]])[1]
######Run the model using R glm function (NOT runRM)##########################################
rownames(clindata_directread) == colnames(metabo_directread_fixed)
forglm <- data.frame(row.names = 1:nrow(clindata_directread))
forglm$g = rev(clindata_directread$g)
forglm$type = rev(as.factor(clindata_directread$type))
forglm$Y = as.numeric(t(metabo_directread_fixed[1,]))
lm(formula = form, data = forglm)
rownames(clindata_directread) == colnames(metabo_directread_fixed)
forglm <- data.frame(row.names = 1:nrow(clindata_directread))
forglm$g = rev(clindata_directread$g)
forglm$type = as.factor(clindata_directread$type)
forglm$Y = as.numeric(t(metabo_directread_fixed[1,]))
lm(formula = form, data = forglm)
result2[[1]]
rownames(clindata_directread) == colnames(metabo_directread_fixed)
forglm <- data.frame(row.names = 1:nrow(clindata_directread))
forglm$g = clindata_directread$g
forglm$type = as.factor(clindata_directread$type)
forglm$Y = as.numeric(t(metabo_directread_fixed[1,]))
lm(formula = form, data = forglm)
document()
install()
build()
getstatsOneLM <- function(form, clindata, arraydata) {
#array data is metabolites
#clindata is genes
call=match.call()
print(head(clindata))
print(head(arraydata))
YY <- t(arraydata)                      # the data matrix
#mean of metabolites accross all samples
EY <- apply(YY, 2, mean)                # its mean vector
#sum of squares after centering
SYY <- apply(YY, 2, function(y) {sum(y^2)}) - nrow(YY)*EY^2     # sum of squares after centering
clindata <- data.frame(y=YY[,1], clindata)
dimnames(clindata)[[2]][1] <- 'Y'
print(form)
X <- stats::model.matrix(form, clindata)       # contrasts matrix
N = dim(X)[1]
p <- dim(X)[2]
XtX <- t(X) %*% X
ixtx <- solve(XtX)
bhat <- ixtx %*% t(X) %*% YY            # Use the pseudo-inverse to estimate the parameters
yhat <- X %*% bhat                      # Figure out what is predicted by the model
# Now we partition the sum-of-square errors
rdf <- ncol(X)-1                        # number of parameters in the model
edf <- nrow(YY)-rdf-1                   # additional degrees of freedom
errors <- YY - yhat                     # difference between observed and model predictions
sse <- apply(errors^2, 2, sum)  # sum of squared errors over the samples
mse <- sse/edf                  # mean squared error
ssr <- SYY - sse                        # regression error
msr <- ssr/rdf                  # mean regression error
fval <- msr/mse                 # f-test for the overall regression
pfval <- 1-stats::pf(fval, rdf, edf)           # f-test p-values
stderror.coeff <- sapply(mse,function(x){sqrt(diag(ixtx)*x)})
t.coeff <- bhat/stderror.coeff
p.val.coeff <- 2*stats::pt(-abs(t.coeff),df = (N-p))
#methods::new('IntLimModel', call=call, model=form,
list(# call=call, model=form,
coefficients=bhat,
# predictions=yhat,
#df=c(rdf, edf),
#sse=sse,
#ssr=ssr,
#F.statistics=fval,
#F.p.values=pfval
#std.error.coeff = stderror.coeff,
#t.value.coeff = t.coeff,
p.value.coeff = p.val.coeff # interaction p-value
)
}
result2  = getstatsOneLM(form, clindata = clindata_directread, arraydata = metabo_directread_fixed)
result2
result2[[1]]
result2[[2]]
result2[[1]]
colnames(result2[[1]])[1]
result2[[1]][,1]
lm(formula = form, data = forglm)
clindata_directread
metabolite[1,]
gene = reformatCSVReadinGene(gene_directread, phenotype_directread, gene_of_interest)
metabolite = reformatCSVReadinMetabolite(metabo_directread)
document()
build()
install()
getwd()
result_getStatsOne = getCoeffUsingGetStatsOneLM(gene_directread,
metabo_directread,
phenotype_directread,
gene_of_interest = "117_at",
metabolite_of_interest = "Indoxyl" )
install.packages(devtools)
install_github("mathelab/IntLIM")
library("devtools")
install.packages(devtools)
install_github("mathelab/IntLIM")
library("IntLIM")
document()
bui
build()
install()
